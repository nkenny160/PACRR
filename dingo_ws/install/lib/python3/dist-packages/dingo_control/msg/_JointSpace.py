# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from dingo_control/JointSpace.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import dingo_control.msg
import genpy
import std_msgs.msg

class JointSpace(genpy.Message):
  _md5sum = "5e6feb0611ae6db4a60f3877645d6a2b"
  _type = "dingo_control/JointSpace"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """std_msgs/Header header
  uint32 seq
  time stamp
  string frame_id
dingo_control/Angle FL_foot
dingo_control/Angle FR_foot
dingo_control/Angle RL_foot
dingo_control/Angle RR_foot
================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: dingo_control/Angle
float32 theta1
float32 theta2
float32 theta3"""
  __slots__ = ['header','seq','stamp','frame_id','FL_foot','FR_foot','RL_foot','RR_foot']
  _slot_types = ['std_msgs/Header','uint32','time','string','dingo_control/Angle','dingo_control/Angle','dingo_control/Angle','dingo_control/Angle']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,seq,stamp,frame_id,FL_foot,FR_foot,RL_foot,RR_foot

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(JointSpace, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.seq is None:
        self.seq = 0
      if self.stamp is None:
        self.stamp = genpy.Time()
      if self.frame_id is None:
        self.frame_id = ''
      if self.FL_foot is None:
        self.FL_foot = dingo_control.msg.Angle()
      if self.FR_foot is None:
        self.FR_foot = dingo_control.msg.Angle()
      if self.RL_foot is None:
        self.RL_foot = dingo_control.msg.Angle()
      if self.RR_foot is None:
        self.RR_foot = dingo_control.msg.Angle()
    else:
      self.header = std_msgs.msg.Header()
      self.seq = 0
      self.stamp = genpy.Time()
      self.frame_id = ''
      self.FL_foot = dingo_control.msg.Angle()
      self.FR_foot = dingo_control.msg.Angle()
      self.RL_foot = dingo_control.msg.Angle()
      self.RR_foot = dingo_control.msg.Angle()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3I().pack(_x.seq, _x.stamp.secs, _x.stamp.nsecs))
      _x = self.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_12f().pack(_x.FL_foot.theta1, _x.FL_foot.theta2, _x.FL_foot.theta3, _x.FR_foot.theta1, _x.FR_foot.theta2, _x.FR_foot.theta3, _x.RL_foot.theta1, _x.RL_foot.theta2, _x.RL_foot.theta3, _x.RR_foot.theta1, _x.RR_foot.theta2, _x.RR_foot.theta3))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.stamp is None:
        self.stamp = genpy.Time()
      if self.FL_foot is None:
        self.FL_foot = dingo_control.msg.Angle()
      if self.FR_foot is None:
        self.FR_foot = dingo_control.msg.Angle()
      if self.RL_foot is None:
        self.RL_foot = dingo_control.msg.Angle()
      if self.RR_foot is None:
        self.RR_foot = dingo_control.msg.Angle()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.seq, _x.stamp.secs, _x.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.frame_id = str[start:end]
      _x = self
      start = end
      end += 48
      (_x.FL_foot.theta1, _x.FL_foot.theta2, _x.FL_foot.theta3, _x.FR_foot.theta1, _x.FR_foot.theta2, _x.FR_foot.theta3, _x.RL_foot.theta1, _x.RL_foot.theta2, _x.RL_foot.theta3, _x.RR_foot.theta1, _x.RR_foot.theta2, _x.RR_foot.theta3,) = _get_struct_12f().unpack(str[start:end])
      self.stamp.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3I().pack(_x.seq, _x.stamp.secs, _x.stamp.nsecs))
      _x = self.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_12f().pack(_x.FL_foot.theta1, _x.FL_foot.theta2, _x.FL_foot.theta3, _x.FR_foot.theta1, _x.FR_foot.theta2, _x.FR_foot.theta3, _x.RL_foot.theta1, _x.RL_foot.theta2, _x.RL_foot.theta3, _x.RR_foot.theta1, _x.RR_foot.theta2, _x.RR_foot.theta3))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.stamp is None:
        self.stamp = genpy.Time()
      if self.FL_foot is None:
        self.FL_foot = dingo_control.msg.Angle()
      if self.FR_foot is None:
        self.FR_foot = dingo_control.msg.Angle()
      if self.RL_foot is None:
        self.RL_foot = dingo_control.msg.Angle()
      if self.RR_foot is None:
        self.RR_foot = dingo_control.msg.Angle()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.seq, _x.stamp.secs, _x.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.frame_id = str[start:end]
      _x = self
      start = end
      end += 48
      (_x.FL_foot.theta1, _x.FL_foot.theta2, _x.FL_foot.theta3, _x.FR_foot.theta1, _x.FR_foot.theta2, _x.FR_foot.theta3, _x.RL_foot.theta1, _x.RL_foot.theta2, _x.RL_foot.theta3, _x.RR_foot.theta1, _x.RR_foot.theta2, _x.RR_foot.theta3,) = _get_struct_12f().unpack(str[start:end])
      self.stamp.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_12f = None
def _get_struct_12f():
    global _struct_12f
    if _struct_12f is None:
        _struct_12f = struct.Struct("<12f")
    return _struct_12f
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
