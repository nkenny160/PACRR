// Generated by gencpp from file dingo_peripheral_interfacing/ElectricalMeasurements.msg
// DO NOT EDIT!


#ifndef DINGO_PERIPHERAL_INTERFACING_MESSAGE_ELECTRICALMEASUREMENTS_H
#define DINGO_PERIPHERAL_INTERFACING_MESSAGE_ELECTRICALMEASUREMENTS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace dingo_peripheral_interfacing
{
template <class ContainerAllocator>
struct ElectricalMeasurements_
{
  typedef ElectricalMeasurements_<ContainerAllocator> Type;

  ElectricalMeasurements_()
    : battery_voltage_level(0.0)
    , servo_buck_voltage_level(0.0)  {
    }
  ElectricalMeasurements_(const ContainerAllocator& _alloc)
    : battery_voltage_level(0.0)
    , servo_buck_voltage_level(0.0)  {
  (void)_alloc;
    }



   typedef float _battery_voltage_level_type;
  _battery_voltage_level_type battery_voltage_level;

   typedef float _servo_buck_voltage_level_type;
  _servo_buck_voltage_level_type servo_buck_voltage_level;





  typedef boost::shared_ptr< ::dingo_peripheral_interfacing::ElectricalMeasurements_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::dingo_peripheral_interfacing::ElectricalMeasurements_<ContainerAllocator> const> ConstPtr;

}; // struct ElectricalMeasurements_

typedef ::dingo_peripheral_interfacing::ElectricalMeasurements_<std::allocator<void> > ElectricalMeasurements;

typedef boost::shared_ptr< ::dingo_peripheral_interfacing::ElectricalMeasurements > ElectricalMeasurementsPtr;
typedef boost::shared_ptr< ::dingo_peripheral_interfacing::ElectricalMeasurements const> ElectricalMeasurementsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::dingo_peripheral_interfacing::ElectricalMeasurements_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::dingo_peripheral_interfacing::ElectricalMeasurements_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::dingo_peripheral_interfacing::ElectricalMeasurements_<ContainerAllocator1> & lhs, const ::dingo_peripheral_interfacing::ElectricalMeasurements_<ContainerAllocator2> & rhs)
{
  return lhs.battery_voltage_level == rhs.battery_voltage_level &&
    lhs.servo_buck_voltage_level == rhs.servo_buck_voltage_level;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::dingo_peripheral_interfacing::ElectricalMeasurements_<ContainerAllocator1> & lhs, const ::dingo_peripheral_interfacing::ElectricalMeasurements_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace dingo_peripheral_interfacing

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::dingo_peripheral_interfacing::ElectricalMeasurements_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dingo_peripheral_interfacing::ElectricalMeasurements_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dingo_peripheral_interfacing::ElectricalMeasurements_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dingo_peripheral_interfacing::ElectricalMeasurements_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dingo_peripheral_interfacing::ElectricalMeasurements_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dingo_peripheral_interfacing::ElectricalMeasurements_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::dingo_peripheral_interfacing::ElectricalMeasurements_<ContainerAllocator> >
{
  static const char* value()
  {
    return "7cd8bf648ee5631ca57dfdbcfb5a9043";
  }

  static const char* value(const ::dingo_peripheral_interfacing::ElectricalMeasurements_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x7cd8bf648ee5631cULL;
  static const uint64_t static_value2 = 0xa57dfdbcfb5a9043ULL;
};

template<class ContainerAllocator>
struct DataType< ::dingo_peripheral_interfacing::ElectricalMeasurements_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dingo_peripheral_interfacing/ElectricalMeasurements";
  }

  static const char* value(const ::dingo_peripheral_interfacing::ElectricalMeasurements_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::dingo_peripheral_interfacing::ElectricalMeasurements_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 battery_voltage_level\n"
"float32 servo_buck_voltage_level\n"
;
  }

  static const char* value(const ::dingo_peripheral_interfacing::ElectricalMeasurements_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::dingo_peripheral_interfacing::ElectricalMeasurements_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.battery_voltage_level);
      stream.next(m.servo_buck_voltage_level);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ElectricalMeasurements_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::dingo_peripheral_interfacing::ElectricalMeasurements_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::dingo_peripheral_interfacing::ElectricalMeasurements_<ContainerAllocator>& v)
  {
    s << indent << "battery_voltage_level: ";
    Printer<float>::stream(s, indent + "  ", v.battery_voltage_level);
    s << indent << "servo_buck_voltage_level: ";
    Printer<float>::stream(s, indent + "  ", v.servo_buck_voltage_level);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DINGO_PERIPHERAL_INTERFACING_MESSAGE_ELECTRICALMEASUREMENTS_H
