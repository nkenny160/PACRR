// Generated by gencpp from file dingo_control/TaskSpace.msg
// DO NOT EDIT!


#ifndef DINGO_CONTROL_MESSAGE_TASKSPACE_H
#define DINGO_CONTROL_MESSAGE_TASKSPACE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>

namespace dingo_control
{
template <class ContainerAllocator>
struct TaskSpace_
{
  typedef TaskSpace_<ContainerAllocator> Type;

  TaskSpace_()
    : header()
    , seq(0)
    , stamp()
    , frame_id()
    , FL_foot()
    , FR_foot()
    , RL_foot()
    , RR_foot()  {
    }
  TaskSpace_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , seq(0)
    , stamp()
    , frame_id(_alloc)
    , FL_foot(_alloc)
    , FR_foot(_alloc)
    , RL_foot(_alloc)
    , RR_foot(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint32_t _seq_type;
  _seq_type seq;

   typedef ros::Time _stamp_type;
  _stamp_type stamp;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _frame_id_type;
  _frame_id_type frame_id;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _FL_foot_type;
  _FL_foot_type FL_foot;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _FR_foot_type;
  _FR_foot_type FR_foot;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _RL_foot_type;
  _RL_foot_type RL_foot;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _RR_foot_type;
  _RR_foot_type RR_foot;





  typedef boost::shared_ptr< ::dingo_control::TaskSpace_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::dingo_control::TaskSpace_<ContainerAllocator> const> ConstPtr;

}; // struct TaskSpace_

typedef ::dingo_control::TaskSpace_<std::allocator<void> > TaskSpace;

typedef boost::shared_ptr< ::dingo_control::TaskSpace > TaskSpacePtr;
typedef boost::shared_ptr< ::dingo_control::TaskSpace const> TaskSpaceConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::dingo_control::TaskSpace_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::dingo_control::TaskSpace_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::dingo_control::TaskSpace_<ContainerAllocator1> & lhs, const ::dingo_control::TaskSpace_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.seq == rhs.seq &&
    lhs.stamp == rhs.stamp &&
    lhs.frame_id == rhs.frame_id &&
    lhs.FL_foot == rhs.FL_foot &&
    lhs.FR_foot == rhs.FR_foot &&
    lhs.RL_foot == rhs.RL_foot &&
    lhs.RR_foot == rhs.RR_foot;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::dingo_control::TaskSpace_<ContainerAllocator1> & lhs, const ::dingo_control::TaskSpace_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace dingo_control

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::dingo_control::TaskSpace_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dingo_control::TaskSpace_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dingo_control::TaskSpace_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dingo_control::TaskSpace_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dingo_control::TaskSpace_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dingo_control::TaskSpace_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::dingo_control::TaskSpace_<ContainerAllocator> >
{
  static const char* value()
  {
    return "8fc7e9d124f03ecf57877d8ed7db4875";
  }

  static const char* value(const ::dingo_control::TaskSpace_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x8fc7e9d124f03ecfULL;
  static const uint64_t static_value2 = 0x57877d8ed7db4875ULL;
};

template<class ContainerAllocator>
struct DataType< ::dingo_control::TaskSpace_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dingo_control/TaskSpace";
  }

  static const char* value(const ::dingo_control::TaskSpace_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::dingo_control::TaskSpace_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Header header\n"
"  uint32 seq\n"
"  time stamp\n"
"  string frame_id\n"
"geometry_msgs/Point FL_foot\n"
"geometry_msgs/Point FR_foot\n"
"geometry_msgs/Point RL_foot\n"
"geometry_msgs/Point RR_foot\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::dingo_control::TaskSpace_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::dingo_control::TaskSpace_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.seq);
      stream.next(m.stamp);
      stream.next(m.frame_id);
      stream.next(m.FL_foot);
      stream.next(m.FR_foot);
      stream.next(m.RL_foot);
      stream.next(m.RR_foot);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct TaskSpace_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::dingo_control::TaskSpace_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::dingo_control::TaskSpace_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "seq: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.seq);
    s << indent << "stamp: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.stamp);
    s << indent << "frame_id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.frame_id);
    s << indent << "FL_foot: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.FL_foot);
    s << indent << "FR_foot: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.FR_foot);
    s << indent << "RL_foot: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.RL_foot);
    s << indent << "RR_foot: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.RR_foot);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DINGO_CONTROL_MESSAGE_TASKSPACE_H
